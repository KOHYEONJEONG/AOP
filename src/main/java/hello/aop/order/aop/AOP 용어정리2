횡단 관심사(cross-cultting concerms)
- 하나의 부가 기능이 여러 곳에 동일하게 사용된다는 뜻이다.

#부가기능 적용 문제를 정리하면 다음과 같다.
1. 부가기능을 적용할 떄 아주 많은 반복이 필요하다.
2. 부가 기능이 여러 곳에 퍼져서 중복 코드를 만들어낸다.
3. 부가 기능을 변경할 떄 중복 때문에 많은 수정이 필요하다.
4. 부가 기능의 적용 대상을 변경할 떄 많은 수정이 필요하다.

OOP 방식으로는 해결이 어렵고 그래서 AOP 기능이 나온거다.
AOP = 관점( 에스팩트를 사용한 프로그래밍 방식을 관점 지향 프로그래밍 AOP(Aspect-Oriented Programming)이라 함)
AOP는 횡단 관심사를 도와주는 보조 목적으로 개발이 되었다.

#AOP 적용 방식
- AOP를 사용하면 핵심기능과 부가기능이 코드상 완전히 분리되어서 관리
- 그렇다면 AOP를 사용할 때가 부가 기능 로직은 어떤 방식으로 실제 로직에 추가될 수 있을까?

[적용방법 3가지)
1. 컴파일 시점
2. 클래스 로딩 시점
3. 런타임 시점


#AOP 용어 정리
1. 조인 포인트(Join Point)
- 추상적인 개념. 즉) aop를 적용할 수 있는 모든 지점
- 중요) 스프링 aop는 프록시 방식을 사용하므로 조인포인트는 항상 메소드 실행 지점으로 제한된다.

2. 포인트컷
- 조인 포인트 중에서 어드바이스가 적용될 위치를 선별하는 기능
- 주로 AsepctJ 표현식을 사용해서 지정
- 프록시를 사용하는 ㅅ프링 aop는 메서드 실행 지점만 포인트컷으로 선별 가능

3. 타켓(Target)
- 어드바이스를 받는 객체, 포인트컷으로 결정

4. 어드바이스(Advice)
- 부가 기능
- 특정 조인 포인트에서 Aspect에 의해 취해지는 조치
- Around(주변), Before(전), After(후)와 같은 다양한 종류의 어드바이스가 있다.

5. 에스팩트(Aspect)
- 어드바이스 + 포인트컷을 모듈화 한 것
- @Aspect를 생각면 됨
- 여러 어드바이스와 포인트 것이 함께 존재

6. 어드바이저(Advisor)
- 하나의 어드바이스와 하나의 포인트 컷으로 구성
- 스프링 AOP에서만 사용되는 특별한 용어

7. 위빙(Weaving)
- 포인트컷으로 결정한 타켓의 조인 포인트에 어드바이스를 적용하는것.
- 위빙을 통해 핵심 기능 코드에 영향을 주지 않고 부가 기능을 추가 할 수 있음
- AOP 적용을 위해 애스펙트를 객체에 연결한 상태
1) 컴파일 타임(AspectJ compiler)
2) 로드 타임
3) 런타임, 스프링 AOP는 런타임, 프록시 방식

8.AOP 프록시
1) AOP기능을 구현하기 위해 만든 프록시 객체, 스프링에서 AOP 프록시는 JDK 동적 프록시 또는 CGLIB 프록시 이다.


9. 스프링 AOP 적용 위치
1) 적용 가능지점(조인포인트) : 생성자, 필드 값 접근, static 메서드, 필드 값 접근에는 프록시 개념이 적용
2) 프록시 방식을 사용하는 스프링 aop는 메서드 실행지점에서만 AOP를 적용할 수 있다.
- 프록시 메서드는 오버라이딩 개념으로 동작한다. 따라서 생성자나 static 메서드, 필드 값 접근에서는 프록시 개념이 적용될 수 있다.
- 프록시를 사용하는 '스프링 AOP의 조인 포인트는 메서드 실행으로 제한'된다.
